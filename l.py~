import rpc_pb2 as ln
import rpc_pb2_grpc as lnrpc
import grpc
import os
from PIL import Image, ImageDraw, ImageFont


# Due to updated ECDSA generated tls.cert we need to let gprc know that
# we need to use that cipher suite otherwise there will be a handhsake
# error when we communicate with the lnd rpc server.
os.environ["GRPC_SSL_CIPHER_SUITES"] = 'HIGH+ECDSA'

# Lnd cert is at ~/.lnd/tls.cert on Linux and
# ~/Library/Application Support/Lnd/tls.cert on Mac
cert = open(os.path.expanduser('/home/pi/.lnd/tls.cert'), 'rb').read()
creds = grpc.ssl_channel_credentials(cert)
channel = grpc.secure_channel('localhost:10009', creds)
stub = lnrpc.LightningStub(channel)

def getinfo():
	return stub.GetInfo(ln.GetInfoRequest())

def listpeers():
	return stub.ListPeers(ln.ListPeersRequest())

def getnodeinfo(pk):
	return stub.GetNodeInfo(ln.NodeInfoRequest(pub_key=pk))

def listchannels():
	return stub.ListChannels(ln.ListChannelsRequest())


def printinfo():
	peers = listpeers()
	for peer in peers.peers:
		pk = peer.pub_key
		ni = getnodeinfo(pk)
		print ni.node.alias, ni.node.addresses[0].addr
		print ni.node.pub_key
		print "--"

	chans = listchannels()
	print len(chans.channels), "channels:"
	for chan in chans.channels:
		pk = chan.remote_pubkey
		peer = getnodeinfo(pk)
		print peer.node.alias, " - ", peer.node.color, " - ", peer.num_channels, " - ", peer.total_capacity
		print chan.capacity, chan.local_balance, chan.remote_balance
		print "--"

def printimg(m):
	for x in range(32):
		for y in range(32):
			p = m.getpixel((x,y))
			q = sum(p)
			print q,
		print

m = Image.new("RGB", (32,32), "black")


printimg(m)
